.model small
.stack 100h
 

.data

rows                   dw    ?
collumns               dw    ?

Max                    dw    ?
Min                    dw    ?
Add_number             dw    ?
Sub_number             dw    ?
Ans                    dw    0
Index                  dw    0
Mode                   dw    0

Collumn_counter        dw    ?
Counter                dw    ?

buffer_number          dw    ?

array                  db    10*10 dup (?)

New_str                db    13,10,'$'
Matrix_input_massage   db    13,10,'Input elements:',13,10,'$'
Matrix_sizeN           db    'N (<=10) = $'
Matrix_sizeM           db    'M (<=10) = $'
Error_message          db    13,10,'Incorrect enter',13,10

enterQuery db 'Enter number      ',13,10,'$'          
errorMessage db 13,10,'Error, try again  ','$'
errorZero db 13,10,'Error, division by zero ','$'

buff                   db    3,0,3 dup ('$'),'$'

Max_output             db    13,10,'Answer = $',13,10

.code
;--------------------------------------- ????????? ????? ???????? ?????
input proc
    push bx 
    push cx
    push dx
    push di

    ;mov ah, 9
    ;mov dx, offset enterQuery
    ;int 21h

    xor dx, dx
    xor ax, ax
    xor bx, bx
    xor cx, cx

startEnter:

    xor dx, dx
    xor ax, ax
    
    mov ah, 01h 
    int 21h
    xor ah, ah

    cmp al, 8
    jz delete

    cmp al, 13
    jz outInput

    cmp al, '0'
    jl error 

    cmp al, '9' 
    jg error


    sub al, 30h
    xor ah, ah
    xchg ax, bx
    mov dx, 0Ah
    mul dx

    jc error
    add bx, ax
    jmp startEnter

delete:
    xor dx, dx
    mov ax, bx
    mov bx, 10
    div bx
    mov bx, ax
    push bx    
    
    
    mov bh, 0
    mov ah, 03h
    int 10h
    
    cmp Mode, 0
    je case1
    cmp Mode, 1
    je case1
    cmp Mode, 2
    je case2
    cmp Mode, 3
    je case3
    case3:
    cmp dl, 18
    jl skip
    case1:
    cmp dl, 4
    jl skip
    
    case2:
    mov ah, 02h
    int 10h
    
    mov ah, 02h
    mov dl, 32
    int 21h

    mov ah, 03h
    int 10h
    
    dec dl
    
    mov ah, 02h
    int 10h 
   
    pop bx
    
    jmp startEnter
    
skip:

    inc dl
    
    mov ah, 02h
    int 10h 
    
    pop bx
    
    jmp startEnter
    
outInput:
    mov ax, bx
    
    pop di  
    pop dx
    pop cx
    pop bx
    ret

error:
    mov ah, 9
    mov dx, offset errorMessage
    int 21h

    mov Mode, 3
    xor bx, bx
    jmp startEnter

input endp
;--------------------------------------- ????????? ?????? ???????? ?????
output proc
    push cx 
    push dx
    push bx
    push ax

    xor dx, dx
    xor bx, bx
    xor cx, cx

    mov bx, 10
    xor cx,cx 

    for1:
    xor dx, dx 
    div bx

    push dx 
    inc cx  
    test ax,ax  
    jnz for1
    mov ah, 02h 

    for2:
    pop dx  
    add dl, 30h 
    int 21h
    loop for2

    pop ax  
    pop bx
    pop dx
    pop cx
    ret

output endp

main:
    mov AX, @data
    mov DS, AX
    jmp J_start                        ; ??????? ? ????? J_start


J_error_message1:
    mov DX, offset Error_message       ; ????????? ?????? ?????? Error_message ? ??????? DX
    mov AH, 9h                         ; ??????? ?????? ??????
    int 21h    
    jmp J_start

J_error_message2:
    mov DX, offset Error_message       ; ????????? ?????? ?????? Error_message ? ??????? DX
    mov AH, 9h                         ; ??????? ?????? ??????
    int 21h                            ; ????? ???????
    jmp J_next

J_start:
    mov Mode, 0
    mov DX, offset Matrix_sizeN         ; ????????? ?????? ?????? Matrix_size ? ??????? DX
    mov ah, 9h                         ; ??????? ?????? ??????
    int 21h                            ; ????? ???????
    call input                         ; ????? ????????? input
    cmp AX, 10                       
    jg J_error_message1                 
    
    mov rows, AX                       ; ????????? ???????? ???????? AX ? ?????????? rows
    
    mov Mode, 1
    
    J_next:
    mov DX, offset Matrix_sizeM         ; ????????? ?????? ?????? Matrix_size ? ??????? DX
    mov ah, 9h                         ; ??????? ?????? ??????
    int 21h                            ; ????? ???????
    call input                         ; ????? ????????? input

    cmp AX, 10                       
    jg J_error_message2  
    
    mov Mode, 2 
    mov collumns, AX                   ; ????????? ???????? ???????? AX ? ?????????? rows

    mov DX, offset Matrix_input_massage; ????????? ?????? ?????? Matrix_input_massage ? ??????? DX
    mov ah, 9h                         ; ??????? ?????? ??????
    int 21h                            ; ????? ???????

    lea BX, array                      ; ????????? ?????? array ? ??????? BX
    mov CX, rows                       ; ????????? ???????? ?????????? rows ? ??????? CX

J_in_1:
    push CX                            ; ????????? ???????? ???????? CX ? ????
    mov CX, collumns                   ; ????????? ???????? ?????????? collumns ? ??????? CX
    mov SI, 0                          ; ????????? 0 ? ??????? SI
    mov Index, 0

J_in_2:
    mov Mode, 2
    call input                         ; ????? ????????? input
    mov [BX][SI], AL                   ; ????????? ???????? ???????? AL ? ???????
    inc SI                             ; ????????????????? SI
    mov [BX][SI], AH                   ; ????????? ???????? ???????? AH ? ???????
    inc SI                             ; ????????????????? SI
    inc Index
    
    test Index, 1
    jnz case
    add ans, AX
    case:
    
    
    loop J_in_2                        ; ??????????? ??????? ? ????? J_in_2
 
    add BX, collumns                   ; ????? ???????? ???????? BX ? ?????????? collumns
    add BX, collumns                   ; ????? ???????? ???????? BX ? ?????????? collumns 
    pop CX                             ; ????????? ???????? ?? ????? ? ??????? CX
    loop J_in_1                        ; ??????????? ??????? ? ????? J_in_1
    
    
    lea BX, array                      ; ????????? ? ??????? BX ?????? ?? ?????????? array
    mov CX, rows                       ; ????????? ???????? ?????????? rows ? ??????? CX

J_out_1:
    push CX                            ; ????????? ???????? ???????? CX ? ????
    mov CX, collumns                   ; ????????? ? ??????? CX ???????? ?????????? collumns
    mov SI, 0                          ; ????????? 0 ? ??????? SI
    mov DX, offset New_str             ; ????????? ?????? ?????? New_str ? ??????? DX
    mov ah, 9h                         ; ??????? ?????? ??????
    int 21h                            ; ????? ???????

J_out_2:
    xor AX, AX                         ; ??????? ???????? AX
    mov AL, [BX][SI]                   ; ????????? ? ??????? AL ???????? ?? ???????
    inc SI                             ; ????????????????? ???????? SI
    mov AH, [BX][SI]                   ; ????????? ? ??????? AH ???????? ?? ???????
    inc SI                             ; ????????????????? ???????? SI
    call output                        ; ????? ??????? ?????? ?????

    mov DL, ' '                        ; ????????? ???????? ???????? AL ? ??????? DL
    mov ah, 02h                        ; ??????? ?????? ???????
    int 21h                            ; ????? ???????
    
    
    loop J_out_2                       ; ??????????? ??????? ? ????? J_in_2
 
    add BX, collumns                   ; ????? ???????? ???????? BX ? ?????????? collumns
    add BX, collumns                   ; ????? ???????? ???????? BX ? ?????????? collumns
    pop CX                             ; ????????? ???????? ?? ????? ? ??????? CX
    loop J_out_1                       ; ??????????? ??????? ? ????? J_in_1



    mov DX, offset New_str             ; ????????? ?????? ?????? New_str ? ??????? DX
    mov ah, 9h                         ; ??????? ?????? ??????
    int 21h                            ; ????? ???????
    
    
    
    xor DX, DX


    mov DL, ' '                        ; ????????? ???????? ???????? AL ? ??????? DL
    mov ah, 02h                        ; ??????? ?????? ???????
    int 21h                            ; ????? ???????

    xor AX, AX
    xor BX, BX
    xor DX, DX

    mov DX, offset Max_output          ; ????????? ?????? ?????? input_message ? ??????? DX
    mov ah, 9h                         ; ??????? ?????? ??????
    int 21h                            ; ????? ???????    
    mov AX, Ans
    call output

    mov ah, 4ch                         ; ??????? ?????????? ?????????
    int 21h                             ; ????? ???????

end main